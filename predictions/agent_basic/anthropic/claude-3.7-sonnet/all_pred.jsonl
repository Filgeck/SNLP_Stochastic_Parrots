{"instance_id": "astropy__astropy-12907", "model_patch": "--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])", "model_name_or_path": "agent_basic_anthropic/claude-3.7-sonnet"}
{"instance_id": "astropy__astropy-14182", "model_patch": "--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -68,6 +68,8 @@ class RST(basic.Basic):\n     delimiter = \" \"\n     \"\"\" Column delimiter \"\"\"\n \n+    header_rows = None\n+\n     def __init__(self, **kwargs):\n         super().__init__(**kwargs)\n         self.data.start_line = 0\n@@ -179,14 +181,25 @@ class RSTHeader(basic.BasicHeader):\n         # Then the header column row\n         header_strs = self.splitter.join([x.info.name for x in self.cols])\n         lines.append(header_strs)\n-\n+        \n         # Then the header delimiter row\n         delimiter_strs = []\n         for col in self.cols:\n             delimiter_strs.append(\"=\" * len(col.info.name))\n         lines.append(self.splitter.join(delimiter_strs))\n \n+        # If header_rows are specified, add them\n+        if self.data.header_rows is not None:\n+            # Insert the header rows after the column names\n+            # but before the data begins\n+            for i, row_type in enumerate(self.data.header_rows):\n+                header_row = []\n+                for col in self.cols:\n+                    if hasattr(col.info, row_type):\n+                        header_row.append(str(getattr(col.info, row_type)))\n+                    else:\n+                        header_row.append(\"\")\n+                lines.insert(1 + i, self.splitter.join(header_row))\n+\n \n class RSTData(basic.BasicData):\n     \"\"\"RST data reader\"\"\"\n@@ -200,6 +213,12 @@ class RSTOutputter(basic.TableOutputter):\n \n def get_readme(readme, package='astropy'):\n     \"\"\"Get README.rst contents as a string.\"\"\"\n+    from pathlib import Path\n+    \n+    if isinstance(readme, Path):\n+        with open(readme, 'r') as f:\n+            return f.read()\n+\n     if os.path.exists(readme):\n         with open(readme, 'r') as f:\n             return f.read()", "model_name_or_path": "agent_basic_anthropic/claude-3.7-sonnet"}
{"instance_id": "astropy__astropy-14365", "model_patch": "--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,7 @@ def _line_type(line, delimiter=None):\n     >>> _line_type(\" some non-comment gibberish\")\n     Traceback (most recent call last):\n         ...\n-    ValueError: Unrecognized QDP line...\n+    ValueError: Unrecognized QDP line: some non-comment gibberish\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    _command_re = r\"(?i)read [ts]err(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:", "model_name_or_path": "agent_basic_anthropic/claude-3.7-sonnet"}
{"instance_id": "astropy__astropy-14995", "model_patch": "--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -516,13 +516,15 @@ class NDArithmeticMixin:\n         if (\n             self.mask is None and operand is not None and operand.mask is None\n         ) or handle_mask is None:\n-            return None\n+            return None \n         elif self.mask is None and operand is not None:\n             # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n         elif operand is None:\n             return deepcopy(self.mask)\n-        else:\n+        elif operand.mask is None:\n+            return deepcopy(self.mask)\n+        else:   \n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)", "model_name_or_path": "agent_basic_anthropic/claude-3.7-sonnet"}
{"instance_id": "astropy__astropy-6938", "model_patch": "--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):", "model_name_or_path": "agent_basic_anthropic/claude-3.7-sonnet"}
{"instance_id": "astropy__astropy-7746", "model_patch": "--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,8 +1212,16 @@ class WCS(WCSBase):\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            # Special handling for empty arrays\n+            if any(len(ax) == 0 for ax in axes):\n+                if sky == 'output':\n+                    return [np.array([]) for _ in range(self.naxis)]\n+                else:\n+                    return [np.array([]) for _ in axes]\n+                \n             try:\n                 axes = np.broadcast_arrays(*axes)\n+                \n             except ValueError:\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n@@ -1232,6 +1240,10 @@ class WCS(WCSBase):\n \n         def _return_single_array(xy, origin):\n             if xy.shape[-1] != self.naxis:\n+                # Special handling for empty arrays that have the right shape\n+                if xy.shape[0] == 0:\n+                    return np.zeros((0, self.naxis if sky == 'output' else xy.shape[-1]))\n+                \n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))", "model_name_or_path": "agent_basic_anthropic/claude-3.7-sonnet"}
