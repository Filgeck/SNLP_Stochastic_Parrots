{"instance_id": "astropy__astropy-12907", "model_patch": "--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -309,6 +309,11 @@\n \n # Maps modeling operators to a function computing and represents the\n # relationship of axes as an array of 0-es and 1-s\n-_operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n-               '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n+_operators = {\n+    '&': _cstack,\n+    '|': _cdot,\n+    '+': _arith_oper,\n+    '-': _arith_oper, '*': _arith_oper, '/': _arith_oper, '**': _arith_oper\n+}\n \n def _pathological_coord_matrix(model, pos, noutp):\n     \"\"\"", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-distill-qwen-14b"}
{"instance_id": "astropy__astropy-14182", "model_patch": "--- a/astropy/io/ascii/core.py\n+++ b/astropy/io/ascii/core.py\n@@ -1651,6 +1651,16 @@\n \n     def __init__(self, **kwargs):\n         super(RST, self).__init__(**kwargs)\n+        self.header_rows = kwargs.get('header_rows')\n+        if self.header_rows:\n+            # Prepend an empty string to force the first line as a header\n+            self.header_rows = [''] + list(self.header_rows)\n+\n+    def write(self, table):\n+        lines = []\n+        if self.header_rows:\n+            lines.extend([f' {row}' for row in self.header_rows])\n+        \n         self.write_header(lines)\n         self.data.write(lines)\n         return lines", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-distill-qwen-14b"}
{"instance_id": "astropy__astropy-14365", "model_patch": "--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -69,7 +69,7 @@\n         _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n         _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n         _line_type_re = re.compile(_type_re)\n+        _line_type_re = re.compile(_type_re, re.IGNORECASE)\n \n         line = line.strip()\n         if not line:", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-distill-qwen-14b"}
{"instance_id": "astropy__astropy-14995", "model_patch": "--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -485,29 +485,36 @@\n         elif self.mask is None and operand is not None:\n             # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            if self.mask is None or operand.mask is None:\n+                # If one mask is None, return the other mask or None\n+                if self.mask is not None:\n+                    result_mask = self.mask\n+                elif operand.mask is not None:\n+                    result_mask = operand.mask\n+                else:\n+                    result_mask = None\n+                return deepcopy(result_mask) if result_mask is not None else None\n+            else:\n+                # Both have masks, use the handle_mask function\n+                return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n         Calculate the resulting wcs.", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-distill-qwen-14b"}
{"instance_id": "astropy__astropy-6938", "model_patch": "--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1263,9 +1263,6 @@\n                     output_field[jdx] = value\n \n             # Replace exponent separator in floating point numbers\n-            if 'D' in format:\n-                output_field.replace(encode_ascii('E'), encode_ascii('D'))\n-\n         # Even if the format precision is 0, we should output a decimal point\n         # as long as there is space to do so--not including a decimal point in\n         # a float value is discouraged by the FITS Standard", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-distill-qwen-14b"}
{"instance_id": "astropy__astropy-7746", "model_patch": "--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1261,6 +1261,17 @@\n         func, *args, sky, origin, ra_dec_order=False):\n \n         if len(args) == 2:\n+            # Handle empty lists\n+            if len(args[0]) == 0 and len(args[1]) == 0:\n+                try:\n+                    return [np.array([], dtype=float).reshape((0, self.naxis))]\n+                except:\n+                    return []\n+\n             try:\n                 axes = np.broadcast_arrays(*args)\n             except ValueError:\n@@ -1281,6 +1292,15 @@\n \n         if len(args) == self.naxis + 1:\n             axes = args[:-1]\n+            # Handle empty lists\n+            if any(len(axis) == 0 for axis in axes):\n+                try:\n+                    return [np.array([], dtype=float).reshape((0, 1)) for _ in range(self.naxis)]\n+                except:\n+                    return []\n+\n             origin = args[-1]\n             try:\n                 axes = [np.asarray(x) for x in axes]", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-distill-qwen-14b"}
{"instance_id": "django__django-10914", "model_patch": "--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -300,7 +300,7 @@\n \n # Default file storage permissions\n FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # Directory permissions for new directories created by file uploads\n FILE_UPLOAD_DIRECTORY_PERMISSIONS = None", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-distill-qwen-14b"}
