{"instance_id": "astropy__astropy-12907", "model_patch": "--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -1,4 +1,5 @@\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n+import operator\n \n \"\"\"\n Functions to determine if a model is separable, i.e.\n@@ -8,7 +9,7 @@\n It analyzes ``n_inputs``, ``n_outputs`` and the operators\n in a compound model by stepping through the transforms\n and creating a ``coord_matrix`` of shape (``n_outputs``, ``n_inputs``).\n-\n+    \n \n Each modeling operator is represented by a function which\n takes two simple models (or two ``coord_matrix`` arrays) and\n@@ -20,7 +21,7 @@\n \n from .core import Model, ModelDefinitionError, CompoundModel\n from .mappings import Mapping\n-\n+from astropy.utils import metadata\n \n __all__ = [\"is_separable\", \"separability_matrix\"]\n \n@@ -101,6 +102,7 @@\n     return separable_matrix\n \n \n+@metadata.deprecated(\"5.3\", alternative=\"Model._calculate_separability_matrix\")\n def _compute_n_outputs(left, right):\n     \"\"\"\n     Compute the number of outputs of two models.\n@@ -123,6 +125,7 @@\n     return noutp\n \n \n+@metadata.deprecated(\"5.3\", alternative=\"Model._calculate_separability_matrix\")\n def _arith_oper(left, right):\n     \"\"\"\n     Function corresponding to one of the arithmetic operators\n@@ -164,6 +167,7 @@\n     return result\n \n \n+@metadata.deprecated(\"5.3\", alternative=\"Model._calculate_separability_matrix\")\n def _coord_matrix(model, pos, noutp):\n     \"\"\"\n     Create an array representing inputs and outputs of a simple model.\n@@ -212,6 +216,7 @@\n     return mat\n \n \n+@metadata.deprecated(\"5.3\", alternative=\"Model._calculate_separability_matrix\")\n def _cstack(left, right):\n     \"\"\"\n     Function corresponding to '&' operation.\n@@ -246,6 +251,7 @@\n     return np.hstack([cleft, cright])\n \n \n+@metadata.deprecated(\"5.3\", alternative=\"Model._calculate_separability_matrix\")\n def _cdot(left, right):\n     \"\"\"\n     Function corresponding to \"|\" operation.\n@@ -282,6 +288,7 @@\n     return result\n \n \n+@metadata.deprecated(\"5.3\", alternative=\"Model._calculate_separability_matrix\")\n def _separable(transform):\n     \"\"\"\n     Calculate the separability of outputs.\n@@ -306,6 +313,7 @@\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n-\n+@metadata.deprecated(\"5.3\", alternative=\"Model._calculate_separability_matrix\")\n # Maps modeling operators to a function computing and represents the\n # relationship of axes as an array of 0-es and 1-s\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-zero:free"}
{"instance_id": "astropy__astropy-14182", "model_patch": "--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -1,5 +1,7 @@\n # Licensed under a 3-clause BSD style license - see LICENSE.rst\n+\n from . import core\n+from astropy.io.ascii import fixedwidth\n from . import fixedwidth\n from astropy.utils import indent\n \n@@ -25,7 +27,17 @@ class RST(core.BaseReader):\n     header_class = RSTHeader\n     data_class = RSTData\n \n-    def __init__(self):\n+    def __init__(self, **kwargs):\n+\n+        # Extract header rows here from kwargs and set a default value if not provided.\n+        self.header_rows = kwargs.get('header_rows', ['name',])\n+        if isinstance(self.header_rows, str):\n+            self.header_rows = [self.header_rows,]\n+        \n+        # Add the rest of kwargs (excluding header_rows)\n+        remaining_kwargs = kwargs.copy()\n+        remaining_kwargs.pop('header_rows', None)\n+\n         core.BaseReader.__init__(self)\n         self.inputter = self.data_class()\n         self.data.splitter.delimiter = ' '\n@@ -213,5 +225,17 @@ class RSTHeader(core.BaseHeader):\n \n \n class RSTWriter(fixedwidth.FixedWidthWriter):\n+    def __init__(self, **kwargs):\n+        self.header_rows = kwargs.pop('header_rows', ['name'])\n+        super().__init__(**kwargs)\n+\n     _format_name = 'rst'\n     _description = 'reStructuredText (RST) table'\n+\n+    def _write_line(self, line):\n+        if line is self.write_spacer_lines[0]:\n+            # Use the appropriate RST table row separator character instead of a space character.\n+            line_separator = \"=\" * (sum(self.widths) + 2 * (len(self.cols) - 1))\n+            self.data.write([line_separator])\n+        else:\n+            super()._write_line(line)", "model_name_or_path": "agent_basic_deepseek/deepseek-r1-zero:free"}
